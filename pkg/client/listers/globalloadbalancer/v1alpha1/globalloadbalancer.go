/*
Copyright 2021 The Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/jmprusi/kcp-ingress/pkg/apis/globalloadbalancer/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GlobalLoadBalancerLister helps list GlobalLoadBalancers.
// All objects returned here must be treated as read-only.
type GlobalLoadBalancerLister interface {
	// List lists all GlobalLoadBalancers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalLoadBalancer, err error)
	// GlobalLoadBalancers returns an object that can list and get GlobalLoadBalancers.
	GlobalLoadBalancers(namespace string) GlobalLoadBalancerNamespaceLister
	GlobalLoadBalancerListerExpansion
}

// globalLoadBalancerLister implements the GlobalLoadBalancerLister interface.
type globalLoadBalancerLister struct {
	indexer cache.Indexer
}

// NewGlobalLoadBalancerLister returns a new GlobalLoadBalancerLister.
func NewGlobalLoadBalancerLister(indexer cache.Indexer) GlobalLoadBalancerLister {
	return &globalLoadBalancerLister{indexer: indexer}
}

// List lists all GlobalLoadBalancers in the indexer.
func (s *globalLoadBalancerLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalLoadBalancer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalLoadBalancer))
	})
	return ret, err
}

// GlobalLoadBalancers returns an object that can list and get GlobalLoadBalancers.
func (s *globalLoadBalancerLister) GlobalLoadBalancers(namespace string) GlobalLoadBalancerNamespaceLister {
	return globalLoadBalancerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GlobalLoadBalancerNamespaceLister helps list and get GlobalLoadBalancers.
// All objects returned here must be treated as read-only.
type GlobalLoadBalancerNamespaceLister interface {
	// List lists all GlobalLoadBalancers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalLoadBalancer, err error)
	// Get retrieves the GlobalLoadBalancer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GlobalLoadBalancer, error)
	GlobalLoadBalancerNamespaceListerExpansion
}

// globalLoadBalancerNamespaceLister implements the GlobalLoadBalancerNamespaceLister
// interface.
type globalLoadBalancerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GlobalLoadBalancers in the indexer for a given namespace.
func (s globalLoadBalancerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalLoadBalancer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalLoadBalancer))
	})
	return ret, err
}

// Get retrieves the GlobalLoadBalancer from the indexer for a given namespace and name.
func (s globalLoadBalancerNamespaceLister) Get(name string) (*v1alpha1.GlobalLoadBalancer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("globalloadbalancer"), name)
	}
	return obj.(*v1alpha1.GlobalLoadBalancer), nil
}
